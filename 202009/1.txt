have started learning spring 5.0

spring provides different ways to access data
to understand how AOP works
familiar with spring related reactive capabilities
implement fully reactive web application
----------------------------------------------------
what is spring framework ?
dependency injection and IOC are pattern which are foundation of spring framework.

jdk8 + jee 7 + baseline no backward compatibility of java 7

reactive support
kotlin support 
all avail in spring 5.
--------------------------------------------------
As a foundation we have spring continer core modules:
  -->Beans
  -->Core
  -->Context 
  -->Spel ( spring expression language)
  above framework provide core functionalities like dependency injection , wiring beans etc etc
  on top of the above module we have modules which provide extras capabilites to spring like AOP , Aspect  , Instrumentation , messaging 
  on top of above we have Web group of moduble which inclue servlet , websocket etc
  and we have Data Access/Interagtion modules like ORM , JDBC, OXM, JMS, Transactions etc.
  --> we have Test Module also test our souce codes
 --------------------------------------------------------
 dependecy injectiona and ioc pattern
 
 the aim of ioc pattern is to provide formalized means to compose application component in simple words its all about remmoving dependency from our source code and make our 
 application loosely coupled , extendable and maintable.
 --------------------------------------------------------
 public class DependencyInjection {

	static class Dependency{
		String doWork() {
			return "work is done";
		}
		
	}
	static class Injected{
		private Dependency dependency;
		
		public Injected(Dependency dependency) {
			this.dependency = dependency;
		}
		
		void delegate() {
			System.out.println(dependency.doWork());
		}
	}	
	public static void main(String[] args) {
    /**
    *This is what actually spring does it just instansiate our classes and wire them together,
    */
		Injected injected = new Injected(new Dependency());
		
    /**
    *This part is actually our application logic , so basically after our application was wired from different classes , now it can execute some bussines login 
    */
		injected.delegate();
	}
}

basiscally we have impleentaiton of depdency injection container .


----------------------------------------------------WIRE BEANS--------------------------------------------------------
How spring framework wires beans together ?
setting up spring frame workd ?
spring bean life cycle ?
spring bean scope ?
DI in spring framework ?


----> pojo business objects|                     |
                           |---> spring container|-----> fully confgigurable system 
-------------> meta config |                     |

POJO and meta info is cosumed by spring container in order to produce fully config system for us. during config of our application spring produces intermeditaee
which are called beans from pojo and meta info

spring beans: defintion and its serveral charateristics
--> a package qualified classname . this is a class from which bean is created.
--> bean behiavoural configuration elements
--> bean depeencies  (its most useful as here we definerd depenidices to our bean and spring framework will provide us)
--> other config setting like databse setting n all.

------------------------------------------------------------
work flow of mvc patterin in web app

Following is the sequence of events corresponding to an incoming HTTP request to DispatcherServlet âˆ’

1. After receiving an HTTP request, DispatcherServlet consults the HandlerMapping to call the appropriate Controller.

2. The Controller takes the request and calls the appropriate service methods based on used GET or POST method. The service method will set model data based on defined business logic and returns view name to the DispatcherServlet.

3. The DispatcherServlet will take help from ViewResolver to pickup the defined view for the request.

4. Once view is finalized, The DispatcherServlet passes the model data to the view which is finally rendered on the browser.

All the above-mentioned components, i.e. HandlerMapping, Controller, and ViewResolver are parts of WebApplicationContext w which is an extension of the plainApplicationContext with some extra features necessary for web applications.
when request is first hit to tomcat server , tomcat will send the req to servlet container which ther further look into corresponfing web.xml file that which servlet
can handle this request i.e DispatcherServet of Spring framework, then upon initliazaton of dispatcherServlet the frame work will try to load application context from 
[Servlet-name]-servlet.xml  file, [Servlet-name] is what you have given in web.xml file , servlet-mapping indicathe what all url is handled by DispatcherServelt servelt.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if you do not want to user default filename and location for [Servlet-name]-servlet xml file implement below in web.xml file
<!-------- DispatcherServlet definition goes here----->
   ....
   <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/HelloWeb-servlet.xml</param-value>
   </context-param>

   <listener>
      <listener-class>
         org.springframework.web.context.ContextLoaderListener
      </listener-class>
   </listener>

inside [Servlet-name].xml
The [servlet-name]-servlet.xml file will be used to create the beans defined, overriding the definitions of any beans defined with the same name in the global scope.

The <context:component-scan...> tag will be use to activate Spring MVC annotation scanning capability which allows to make use of annotations like @Controller and @RequestMapping 
etc

The InternalResourceViewResolver will have rules defined to resolve the view names. As per the above defined rule, a logical view named hello is delegated to a view implementation located 
at /WEB-INF/jsp/hello.jsp 

--------------------------------------------------------------------------------------
different type of mapping are avail in hibernate which you can use to desing database base on you application need.
inheritance
association
collection
component



  







